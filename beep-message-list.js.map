{"version":3,"file":"beep-message-list.js","sourceRoot":"","sources":["src/beep-message-list.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,gBAAgB,CAAC;AAUxB,MAAM,QAAQ,GAAc;IACxB;QACI,OAAO,EAAG,aAAa;QACvB,MAAM,EAAG,KAAK;QACd,IAAI,EAAG,MAAM;QACb,KAAK,EAAG,CAAC;QACT,KAAK,EAAG,KAAK;KAChB,EAAC;QACE,OAAO,EAAG,aAAa;QACvB,MAAM,EAAG,OAAO;QAChB,IAAI,EAAG,MAAM;QACb,KAAK,EAAG,EAAE;QACV,KAAK,EAAG,IAAI;KACf,EAAC;QACE,OAAO,EAAG,aAAa;QACvB,MAAM,EAAG,KAAK;QACd,IAAI,EAAG,MAAM;QACb,KAAK,EAAG,CAAC;QACT,KAAK,EAAG,KAAK;KAChB,EAAC;QACE,OAAO,EAAG,aAAa;QACvB,MAAM,EAAG,KAAK;QACd,IAAI,EAAG,MAAM;QACb,KAAK,EAAG,CAAC;QACT,KAAK,EAAG,KAAK;KAChB,EAAC;QACE,OAAO,EAAG,aAAa;QACvB,MAAM,EAAG,KAAK;QACd,IAAI,EAAG,MAAM;QACb,KAAK,EAAG,CAAC;QACT,KAAK,EAAG,KAAK;KAChB,EAAC;QACE,OAAO,EAAG,aAAa;QACvB,MAAM,EAAG,KAAK;QACd,IAAI,EAAG,MAAM;QACb,KAAK,EAAG,CAAC;QACT,KAAK,EAAG,KAAK;KAChB,EAAC;QACE,OAAO,EAAG,aAAa;QACvB,MAAM,EAAG,KAAK;QACd,IAAI,EAAG,MAAM;QACb,KAAK,EAAG,CAAC;QACT,KAAK,EAAG,KAAK;KAChB;CACJ,CAAA;AAGM,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,UAAU;IAAxC;;QAIL,kBAAa,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;YAC7B,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC;YACpB,IAAI,EAAE,GAAG,EAAE;gBACP,OAAO,IAAI,OAAO,CAAY,CAAC,OAAO,EAAE,EAAE;oBACtC,UAAU,CAAE,GAAG,EAAE;wBACb,OAAO,CAAC,QAAQ,CAAC,CAAC;oBACtB,CAAC,EAAE,IAAI,CAAC,CAAC;gBACb,CAAC,CAAC,CAAA;YACN,CAAC;SACA,CAAC,CAAC;IAgCP,CAAC;IA7BC;;;;;;;;;;;OAWG;IAEM,MAAM;QACb,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;YACpC,OAAO,EAAG,GAAG,EAAE,CAAC,IAAI,CAAA,8BAA8B;YAClD,OAAO,EAAG,GAAG,EAAE,CAAC,IAAI,CAAA,wBAAwB;YAC5C,QAAQ,EAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAA,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAA;;0BAE1C,OAAO,CAAC,OAAO;uBAClB,OAAO,CAAC,IAAI;yBACV,OAAO,CAAC,MAAM;yBACd,OAAO,CAAC,KAAK;wBACd,OAAO,CAAC,KAAK;;aAExB,CAAC;YACF;SACH,CAAC,EAAE,CAAA;IACR,CAAC;;AA3Ca,sBAAM,GAAG,GAAG,CAAA;GAC3B,AADqB,CACpB;AAFS,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CA6C3B","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\n\r\nimport {LitElement, html, css} from 'lit';\r\nimport {customElement} from 'lit/decorators.js';\r\nimport { Task } from '@lit/task';\r\nimport './beep-message';\r\n\r\ntype Message = {\r\n    content: string;\r\n    date: string;\r\n    author: string;\r\n    likes: number;\r\n    liked: boolean\r\n}\r\n\r\nconst messages: Message[] = [\r\n    {\r\n        content : \"Hello world\",\r\n        author : \"Bob\",\r\n        date : \"2023\",\r\n        likes : 1,\r\n        liked : false\r\n    },{\r\n        content : \"Hello hello\",\r\n        author : \"Alice\",\r\n        date : \"2025\",\r\n        likes : 15,\r\n        liked : true\r\n    },{\r\n        content : \"Hello world\",\r\n        author : \"Bob\",\r\n        date : \"2023\",\r\n        likes : 1,\r\n        liked : false\r\n    },{\r\n        content : \"Hello world\",\r\n        author : \"Bob\",\r\n        date : \"2023\",\r\n        likes : 1,\r\n        liked : false\r\n    },{\r\n        content : \"Hello world\",\r\n        author : \"Bob\",\r\n        date : \"2023\",\r\n        likes : 1,\r\n        liked : false\r\n    },{\r\n        content : \"Hello world\",\r\n        author : \"Bob\",\r\n        date : \"2023\",\r\n        likes : 1,\r\n        liked : false\r\n    },{\r\n        content : \"Hello world\",\r\n        author : \"Bob\",\r\n        date : \"2023\",\r\n        likes : 1,\r\n        liked : false\r\n    },\r\n]\r\n\r\n@customElement('beep-message-list')\r\nexport class BeepMessageList extends LitElement {\r\n  static override styles = css`\r\n  `;\r\n\r\n  _messagesTask = new Task(this, {\r\n    args: () => [\"test\"],\r\n    task: () => {\r\n        return new Promise<Message[]>((resolve) => {\r\n            setTimeout( () => {\r\n                resolve(messages);\r\n            }, 2000);\r\n        })\r\n    }\r\n    });\r\n\r\n\r\n  /*override render() {\r\n    return html`${messages.map(message => html`\r\n        <beep-message\r\n            content=${message.content}\r\n            date=${message.date}\r\n            author=${message.author}\r\n            liked=${message.liked}\r\n            likes=${message.likes}\r\n            ></beep-message>\r\n        `)}\r\n    `;\r\n  }*/\r\n\r\n  override render(){\r\n    return html`${this._messagesTask.render({\r\n        initial : () => html`<p>Waiting to start task</p>`,\r\n        pending : () => html`<p>Running task...</p>`,\r\n        complete : (messages) => html`${messages.map(message => html`\r\n            <beep-message\r\n                content=${message.content}\r\n                date=${message.date}\r\n                author=${message.author}\r\n                ?liked=${message.liked}\r\n                likes=${message.likes}\r\n                ></beep-message>\r\n            `)}\r\n        })}`\r\n        })}`\r\n    }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'beep-message-list': BeepMessageList;\r\n  }\r\n}\r\n"]}